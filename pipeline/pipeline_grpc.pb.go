// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pipeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ConEstado(ctx context.Context, in *ConsultaEstado, opts ...grpc.CallOption) (*RespuestaCon, error)
	Solpedido(ctx context.Context, in *Solcamion, opts ...grpc.CallOption) (*RespuestaCon, error)
	ActEntrega(ctx context.Context, in *ActCamion, opts ...grpc.CallOption) (*ConsultaEstado, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pipeline.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ConEstado(ctx context.Context, in *ConsultaEstado, opts ...grpc.CallOption) (*RespuestaCon, error) {
	out := new(RespuestaCon)
	err := c.cc.Invoke(ctx, "/pipeline.Greeter/ConEstado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Solpedido(ctx context.Context, in *Solcamion, opts ...grpc.CallOption) (*RespuestaCon, error) {
	out := new(RespuestaCon)
	err := c.cc.Invoke(ctx, "/pipeline.Greeter/Solpedido", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ActEntrega(ctx context.Context, in *ActCamion, opts ...grpc.CallOption) (*ConsultaEstado, error) {
	out := new(ConsultaEstado)
	err := c.cc.Invoke(ctx, "/pipeline.Greeter/ActEntrega", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	ConEstado(context.Context, *ConsultaEstado) (*RespuestaCon, error)
	Solpedido(context.Context, *Solcamion) (*RespuestaCon, error)
	ActEntrega(context.Context, *ActCamion) (*ConsultaEstado, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) ConEstado(context.Context, *ConsultaEstado) (*RespuestaCon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConEstado not implemented")
}
func (UnimplementedGreeterServer) Solpedido(context.Context, *Solcamion) (*RespuestaCon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solpedido not implemented")
}
func (UnimplementedGreeterServer) ActEntrega(context.Context, *ActCamion) (*ConsultaEstado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActEntrega not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ConEstado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultaEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ConEstado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Greeter/ConEstado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ConEstado(ctx, req.(*ConsultaEstado))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Solpedido_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solcamion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Solpedido(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Greeter/Solpedido",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Solpedido(ctx, req.(*Solcamion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ActEntrega_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActCamion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ActEntrega(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pipeline.Greeter/ActEntrega",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ActEntrega(ctx, req.(*ActCamion))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pipeline.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "ConEstado",
			Handler:    _Greeter_ConEstado_Handler,
		},
		{
			MethodName: "Solpedido",
			Handler:    _Greeter_Solpedido_Handler,
		},
		{
			MethodName: "ActEntrega",
			Handler:    _Greeter_ActEntrega_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline/pipeline.proto",
}
